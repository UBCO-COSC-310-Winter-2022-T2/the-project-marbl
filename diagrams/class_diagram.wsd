@startuml

skin rose

title Types - Class Diagram


skinparam componentStyle uml2
class Client{}
Client "1"--"1" UI: Uses

class Message{
    - message : String
    - date : Date
    - author : User
    +getMessage() : String
    +getDate() : String
    +getAuthor() : String
    +setMessage(String message) : void
}

class User <<Observer>> {
    -username : String
    -password : String
    -email : String
    -friends : List<User>
    -chats : List<chat>
    -onlineStatus : boolean

    +getUsername() : String
    +setUsername(String newUsername) : void
    +verifyPassword(String enteredPassword) : boolean
    +setPassword(String newPassword) : void
    +setOnlineStatus(boolean status) : void
    +getOnlineStatus() : boolean
    +notifyFriendsOfYourStatus() : void
    +getFriends() : List<User>
    +addFriend(String username) : boolean
    +removeFriend(User friend) : boolean
    +updateChat(ChatId myid): void

    +send(String) : void
    +recieve(String) : void
}

User "1"--"0..*" User : hasFriends

Class MQTTClient {
    +sendMessage(String user) : void
    +addUser(User) : void
    +start_connection() : bool
    +end_connection() : bool
    +subscribe(chat) : bool
    +publish(chat,msg) : bool
    +on_message(client, userdata, msg) : event
    +on_disconnect(client,userdata, flags, rc)  : event
    +on_connect(client,userdata, flags, rc):event
}

commandInterface "1"--"1" MQTTClient: Uses

Class ServerConnection {
    +start_connection() : bool
    +end_connection() : bool
    +make_get_request() : result
    +make_post_request() : result
 }
 
 commandInterface "1"--"1" ServerConnection: Uses

Abstract Observer <<Abstract>> {
    +subject : Subject
    +update(): void
}

Abstract Subject <<Abstract>> {
    -observers : List<Observer>
    -state : int
    +getState() : int
    +setState() : void
    +attach() : void
    +notifyAllObservers() : void
}

Subject "1"--"0..*" Observer : Uses


Class groupChat {
    -admin : User
    -chatName : String
    +setchatName(String name) : void
    +getchatName() : String
    +getAdmin() : User
    +setAdmin(User user) : void
}

Class chat <<Subject>> {
    -ChatId : int
    -Users : List<User>
    -MessageHistory : List<Message>
    +getMessageHistory() : List<Message>
    +addMessageToHistory(Message msg) : void
    +addUserToChat(username) : void
    +removeUserFromChat(username) : void
    +notifyAllUsersOfChatUpdate() : void
}

chat "0..*" -- "1..*" User : Has

chat "1" -- "0..*" Message : Has

groupChat---|> chat : extends

chat ---|> Subject : For reference
User ---|> Observer : For reference

class commandInterface <<Mediator>> {
    Interact with the system through here by calling the methods,
    this will interact with the internal system methods and classes
    --
    --
    +getUsernameOfCurrentlyLoggedInUser() : String
    +getCurrentlyLoggedInUser() : User
    +getCurrentChatViewed() : chat
    +setCurrentChatViewed() : void
    +Login(username, password) : boolean
    +Logout() : void
    +ResetPassword(String newPassword) : void
    +SendMessage(String msg): void
    +addUserToChat(username) : void
    +kickUserFromChat(username) : voidx
    +transferAdminship(username, Chat chat) : void
    +createChat(List<User> users) : void
    +createAccount(String username, String password, String email) : boolean
    +addFriend(String username) : boolean
    +removeFriend(String username) : void
    +getFriends() : List<User>
}

commandInterface "1" -- "1" User : uses
commandInterface "1" -- "1" chat: uses

class UI {
    +Buttons and Labels
}

UI "1" -- "1" commandInterface : uses

@enduml